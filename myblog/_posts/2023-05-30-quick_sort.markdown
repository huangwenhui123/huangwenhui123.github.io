快速排序是一种常用的排序算法，它的基本思想是通过递归地将数组分成较小和较大的两个子数组，然后对这两个子数组进行排序，最终使整个数组有序。

下面是用Python实现快速排序的示例代码：
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]  # 选择第一个元素作为基准值
        less = [x for x in arr[1:] if x <= pivot]  # 小于等于基准值的元素
        greater = [x for x in arr[1:] if x > pivot]  # 大于基准值的元素
        return quick_sort(less) + [pivot] + quick_sort(greater)

# 测试代码
arr = [4, 2, 1, 7, 5, 3]
sorted_arr = quick_sort(arr)
print(sorted_arr)

在这段代码中，quick_sort 函数是实现快速排序的核心部分。它首先检查数组的长度，如果长度小于等于1，说明数组已经有序，直接返回。否则，选择第一个元素作为基准值（也可以选择其他元素作为基准值），将数组分成两部分：小于等于基准值的元素和大于基准值的元素。然后对这两个子数组分别调用 quick_sort 函数进行递归排序。最后，将排序好的子数组和基准值拼接在一起，得到最终的有序数组。

在上述示例代码中，我们对输入数组 [4, 2, 1, 7, 5, 3] 进行快速排序，输出结果为 [1, 2, 3, 4, 5, 7]。

需要注意的是，快速排序的时间复杂度为平均情况下的 O(nlogn)，最坏情况下的时间复杂度为 O(n^2)（当数组已经有序或接近有序时）。然而，在实际应用中，快速排序通常表现出很好的性能。